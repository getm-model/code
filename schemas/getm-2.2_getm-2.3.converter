<?xml version="1.0" ?>
<converter source="getm-2.2" target="getm-2.3">
	<links>
		<link source="/getm/m2d/vel_depth_method" target="/getm/domain/vel_depth_method"/>
		<link source="/getm/m2d/Am" target="/getm/m2d/Am_const"/>
		<link source="/getm/temp/temp_AH" target="/getm/temp/temp_AH_const"/>
		<link source="/getm/salt/salt_AH" target="/getm/salt/salt_AH_const"/>
	</links>
	<custom>
		<forward>
<![CDATA[
hotstart = source['getm/param/hotstart'].getValue(usedefault=True)
use_epoch = source['getm/param/use_epoch'].getValue(usedefault=True)
if not hotstart:
	target['getm/param/hotstart_method'].setValue(0)
else:
	if use_epoch:
		target['getm/param/hotstart_method'].setValue(2)
	else:
		target['getm/param/hotstart_method'].setValue(1)

z0_method = source['getm/domain/z0_method'].getValue(usedefault=True)
target['getm/domain/bottfric_method'].setValue(z0_method+2)

nmls_s = ('getm/m3d/vel_'  ,'getm/temp/temp_','getm/salt/salt_')
nmls_t = ('getm/m3d/vel3d_','getm/temp/temp_','getm/salt/salt_')
for n,nml in enumerate(nmls_s):
	adv_split = source[nml+'adv_split'].getValue(usedefault=True)
	hor_adv = source[nml+'hor_adv'].getValue(usedefault=True)
	ver_adv = source[nml+'hor_adv'].getValue(usedefault=True)
	target[nmls_t[n]+'adv_split'].setValue(adv_split+1)
	target[nmls_t[n]+'adv_hor'].setValue(hor_adv)
	target[nmls_t[n]+'adv_ver'].setValue(ver_adv)
	if hor_adv == 1:
		target[nmls_t[n]+'adv_split'].setValue(0)
		target[nmls_t[n]+'adv_ver'].setValue(1)
	elif hor_adv == 2:
		if adv_split in (0,1):
			target[nmls_t[n]+'adv_hor'].setValue(1)
	elif hor_adv == 7:
		target[nmls_t[n]+'adv_hor'].setValue(8)
	if ver_adv == 2:
		target[nmls_t[n]+'adv_ver'].setValue(1)

diffs = ('getm/m2d/Am','getm/temp/temp_AH','getm/salt/salt_AH')
for d,diff in enumerate(diffs):
	if source[diff].getValue(usedefault=True)>0.0:
		if d == 0:
			target[diff+'_method'].setValue(3)
		else:
			target[diff+'_method'].setValue(1)
	else:
		target[diff+'_method'].setValue(0)

]]>
		</forward>
		<backward>
<![CDATA[
hotstart_method = source['getm/param/hotstart_method'].getValue(usedefault=True)
if hotstart_method == 0:
	target['getm/param/hotstart'].setValue(False)
else:
	target['getm/param/hotstart'].setValue(True)
	if hotstart_method == 1:
		target['getm/param/use_epoch'].setValue(False)
	else:
		target['getm/param/use_epoch'].setValue(True)

bottfric_method = source['getm/domain/bottfric_method'].getValue(usedefault=True)
target['getm/domain/z0_method'].setValue(bottfric_method-2)

nmls_s = ('getm/m3d/vel3d_','getm/temp/temp_','getm/salt/salt_')
nmls_t = ('getm/m3d/vel_'  ,'getm/temp/temp_','getm/salt/salt_')
for n,nml in enumerate(nmls_s):
	adv_split = source[nml+'adv_split'].getValue(usedefault=True)
	adv_hor = source[nml+'adv_hor'].getValue(usedefault=True)
	adv_ver = source[nml+'adv_ver'].getValue(usedefault=True)
	target[nmls_t[n]+'hor_adv'].setValue(adv_hor)
	target[nmls_t[n]+'ver_adv'].setValue(adv_ver)
	if adv_split == 0:
		if adv_hor in (2,7,8,9):
			target[nmls_t[n]+'adv_split'].setValue(2)
	else:
		target[nmls_t[n]+'adv_split'].setValue(adv_split-1)
	if adv_hor == 1:
		if adv_split in (1,2):
			target[nmls_t[n]+'hor_adv'].setValue(2)
	if adv_hor == 8:
		target[nmls_t[n]+'hor_adv'].setValue(7)
	if adv_ver == 1:
		target[nmls_t[n]+'ver_adv'].setValue(2)

diffs = ('getm/m2d/Am','getm/temp/temp_AH','getm/salt/salt_AH')
for diff in diffs:
	if source[diff+'_method'].getValue(usedefault=True)==0:
		target[diff].setValue(-1.0)
]]>
		</backward>
	</custom>
</converter>
